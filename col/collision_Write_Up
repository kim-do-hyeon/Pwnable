Daddy told me about cool MD5 hash collision today.
I wanna do something like that too!

ssh col@pwnable.kr -p2222 (pw:guest)

=================================================================================================

col@ubuntu:~$ ls
col  col.c  flag
col@ubuntu:~$ cat col.c
#include <stdio.h>
#include <string.h>
unsigned long hashcode = 0x21DD09EC;            // important 16진수 0x21DD09EC = 10진수 568134124
unsigned long check_password(const char* p){
        int* ip = (int*)p;
        int i;
        int res=0;
        for(i=0; i<5; i++){
                res += ip[i];
        }
        return res;
}

int main(int argc, char* argv[]){
        if(argc<2){
                printf("usage : %s [passcode]\n", argv[0]);
                return 0;
        }
        if(strlen(argv[1]) != 20){
                printf("passcode length should be 20 bytes\n");
                return 0;
        }

        if(hashcode == check_password( argv[1] )){
                system("/bin/cat flag");
                return 0;
        }
        else
                printf("wrong passcode.\n");
        return 0;
}
col@ubuntu:~$ ./col `python -c 'print "\xC8\xCE\xC5\x06"*4 + "\xCC\xCE\xC5\x06"'`
daddy! I just managed to create a hash collision :)
col@ubuntu:~$ 


unsigned long hashcode = 0x21DD09EC;            // important 16진수 0x21DD09EC = 10진수 568134124

똑같이 인자를 전달 길이는 20바이트 즉 20글자로 제한.
전달받은 값은 배열에 각각 나뉘어서 들어가며 res라는 변수에 1~5번 배열의 값을 모두 더하며,
check_passcode 함수의 반환값이 hashcode와 일치할 경우에만 플래그를 넘겨준다.

하지만 568134124은 5로 나누어 떨어지지 않는다는 것이다.

0x21DD09EC 를 5로 나누면 나머지인 6C5CEC8 이다.
결론으로 1~5배열을 더하므로 0x21DD09EC 를 5로 나눈 나머지를 4번 더하고 나머지에 +4를 해줘서 6C5CECC 를 더해준다.


PAYLOAD = ./col `python -c 'print "\xC8\xCE\xC5\x06" * 4 + "\xCC\xCE\xC5\x06";`
FLAG = daddy! I just managed to create a hash collision :)

