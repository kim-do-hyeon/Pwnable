Daddy, teach me how to use random value in programming!

ssh random@pwnable.kr -p2222 (pw:guest)

========================================================

root@PDM0205-E1:/home/pental/sh# ssh random@pwnable.kr -p2222
random@pwnable.kr's password: 
Permission denied, please try again.
random@pwnable.kr's password: 
 ____  __    __  ____    ____  ____   _        ___      __  _  ____  
|    \|  |__|  ||    \  /    ||    \ | |      /  _]    |  |/ ]|    \ 
|  o  )  |  |  ||  _  ||  o  ||  o  )| |     /  [_     |  ' / |  D  )
|   _/|  |  |  ||  |  ||     ||     || |___ |    _]    |    \ |    / 
|  |  |  `  '  ||  |  ||  _  ||  O  ||     ||   [_  __ |     \|    \ 
|  |   \      / |  |  ||  |  ||     ||     ||     ||  ||  .  ||  .  \
|__|    \_/\_/  |__|__||__|__||_____||_____||_____||__||__|\_||__|\_|
                                                                     
- Site admin : daehee87.kr@gmail.com
- IRC : irc.netgarage.org:6667 / #pwnable.kr
- Simply type "irssi" command to join IRC now
- files under /tmp can be erased anytime. make your directory under /tmp
- to use peda, issue `source /usr/share/peda/peda.py` in gdb terminal
Last login: Fri Oct 20 01:38:59 2017 from 58.233.9.148
random@ubuntu:~$ ls
flag  random  random.c
random@ubuntu:~$ cat random.c 
#include <stdio.h>

int main(){
        unsigned int random;
        random = rand();        // random value!

        unsigned int key=0;
        scanf("%d", &key);

        if( (key ^ random) == 0xdeadbeef ){
                printf("Good!\n");
                system("/bin/cat flag");
                return 0;
        }

        printf("Wrong, maybe you should try 2^32 cases.\n");
        return 0;
}

===================================================================

1. 먼저 unsigned int 형 random 변수에 rand()의 리턴값을 저장하는 방식

2. 키 입력 

3. ( key ^ random ) == 0xdeadbeef 가 만족하면 system함수가 실행되는 구조

난수 입력 -> 키 입력
키와 난수를 XOR 연산 결과가 0xdeadbeef 인 경우 인증

rand() 와 srand() 의 차이 중요

rand() 함수는 임의로 생성된 난수이기는 한데
고정값이다.

rand()의 리턴값을 알아 내면 random 이라는 난수에 들어갈 갓을 알아냄

ltrace : 리눅스에서 실행프로그램의 라이브러리 함수를 추적할수 있는 도구

ex) ltrace ./random

===========================================================================

random@ubuntu:~$ ltrace ./random 
__libc_start_main(0x4005f4, 1, 0x7ffea9312dd8, 0x400670 <unfinished ...>
rand(1, 0x7ffea9312dd8, 0x7ffea9312de8, 0)   = 0x6b8b4567
__isoc99_scanf(0x400760, 0x7ffea9312ce8, 0x7ffea9312ce8, 0x7fb6a15690a4

rand(1, 0x7ffea9312dd8, 0x7ffea9312de8, 0)   = 0x6b8b4567

rand()의 리턴값은 0x6b8b4567

간단한 식
(input ^ 0x6b8b4567 ) == 0xdeadbeef

0xdeadbeef = 1101 1110 1010 1101 1011 1110 1110 1111 
0x6b8b4567 = 0110 1011 1000 1011 0100 0101 0110 0111 //random

// 퍼옴
먼저 random과 0xdeadbeef의 앞의 3비트를 보면
1) 0xdeadbeef에 해당하는 비트가 1이기 때문에 input과 random의 비트는 다를 것입니다. 따라서 input은 1이되죠
2) 그 다음 비트를 보면 0xdeadbeef에 해당하는 비트가 1이기 때문에 input과 random의 비트는 다를 것입니다. input은 0이되죠
3) 다음 비트에서는 0xdeadbeef에 해당하는 비트가 0이기 때문에 input과 random의 비트는 같을 것입니다. input은 1이 됩니다

0x6b8b4567^0xdeadbeef = 3039230856

random@ubuntu:~$ (python -c 'print "3039230856"') | ./random
Good!
Mommy, I thought libc random is unpredictable...

PAYLOAD = (python -c 'print "3039230856"') | ./random
FLAG = Mommy, I thought libc random is unpredictable...
